/* Auto-generated by genmsg_java.py for file /data/private/luser/workspace/usc-ros-pkg/p2os/p2os_driver/msg/BatteryState.msg */

package org.ros.message.p2os_driver;

import java.nio.ByteBuffer;

public class BatteryState extends org.ros.message.Message {

  public org.ros.message.std_msgs.Header header = new org.ros.message.std_msgs.Header();
  public float voltage;

  public BatteryState() {
  }

  public static java.lang.String __s_getDataType() { return "p2os_driver/BatteryState"; }
  @Override  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "b72130f0e7ffec93b2b5f573eb2542cb"; }
  @Override  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "Header header\n" +
"float32 voltage\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/Header\n" +
"# Standard metadata for higher-level stamped data types.\n" +
"# This is generally used to communicate timestamped data \n" +
"# in a particular coordinate frame.\n" +
"# \n" +
"# sequence ID: consecutively increasing ID \n" +
"uint32 seq\n" +
"#Two-integer timestamp that is expressed as:\n" +
"# * stamp.secs: seconds (stamp_secs) since epoch\n" +
"# * stamp.nsecs: nanoseconds since stamp_secs\n" +
"# time-handling sugar is provided by the client library\n" +
"time stamp\n" +
"#Frame this data is associated with\n" +
"# 0: no frame\n" +
"# 1: global frame\n" +
"string frame_id\n" +
"\n" +
""; }
  @Override  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  @Override
  public BatteryState clone() {
    BatteryState c = new BatteryState();
    c.deserialize(serialize(0));
    return c;
  }

  @Override
  public void setTo(org.ros.message.Message m) {
    deserialize(m.serialize(0));
  }

  @Override
  public int serializationLength() {
    int __l = 0;
    __l += header.serializationLength();
    __l += 4; // voltage
    return __l;
  }

  @Override
  public void serialize(ByteBuffer bb, int seq) {
    header.serialize(bb, seq);
    bb.putFloat(voltage);
  }

  @Override
  public void deserialize(ByteBuffer bb) {
    header.deserialize(bb);
    voltage = bb.getFloat();
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof BatteryState))
      return false;
    BatteryState other = (BatteryState) o;
    return
      header.equals(other.header) &&
      voltage == other.voltage &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + (this.header == null ? 0 : this.header.hashCode());
    result = prime * result + Float.floatToIntBits(this.voltage);
    return result;
  }
} // class BatteryState
