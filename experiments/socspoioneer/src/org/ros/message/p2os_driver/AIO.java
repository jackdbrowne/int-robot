/* Auto-generated by genmsg_java.py for file /data/private/luser/workspace/usc-ros-pkg/p2os/p2os_driver/msg/AIO.msg */

package org.ros.message.p2os_driver;

import java.nio.ByteBuffer;

public class AIO extends org.ros.message.Message {

  public byte voltages_count;
  public float[] voltages = new float[0];

  public AIO() {
  }

  public static java.lang.String __s_getDataType() { return "p2os_driver/AIO"; }
  @Override  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "80e4ca5770a3db29064af246946ff4fe"; }
  @Override  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "uint8 voltages_count\n" +
"float32[] voltages\n" +
"\n" +
""; }
  @Override  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  @Override
  public AIO clone() {
    AIO c = new AIO();
    c.deserialize(serialize(0));
    return c;
  }

  @Override
  public void setTo(org.ros.message.Message m) {
    deserialize(m.serialize(0));
  }

  @Override
  public int serializationLength() {
    int __l = 0;
    __l += 1; // voltages_count
    __l += 4 + voltages.length * 4; // voltages
    return __l;
  }

  @Override
  public void serialize(ByteBuffer bb, int seq) {
    bb.put(voltages_count);
    bb.putInt(voltages.length);
    for(float val : voltages) {
      bb.putFloat(val);
    }
  }

  @Override
  public void deserialize(ByteBuffer bb) {
    voltages_count = bb.get();

    int __voltages_len = bb.getInt();
    voltages = new float[__voltages_len];
    for(int __i=0; __i<__voltages_len; __i++) {
      voltages[__i] = bb.getFloat();
    }
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof AIO))
      return false;
    AIO other = (AIO) o;
    return
      voltages_count == other.voltages_count &&
      java.util.Arrays.equals(voltages, other.voltages) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + this.voltages_count;
    result = prime * result + java.util.Arrays.hashCode(this.voltages);
    return result;
  }
} // class AIO
